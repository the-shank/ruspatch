fn genvec() -> Vec<u8> {
    let mut s = String::from("a tmp string");
    let ptr = s.as_mut_ptr();
    unsafe {
        let lib_guard = CVE_2019_16140::LIB.read().unwrap();
        let lib = lib_guard.as_ref().unwrap();
        let ptr2vec: libloading::Symbol<fn(ptr: *mut u8, len: usize) -> Vec<u8>> =
            lib.get(b"ptr2vec").unwrap();
        let v = ptr2vec(ptr, s.len());
        return v;
    }
}
unsafe fn ptr2vec(ptr: *mut u8, len: usize) -> Vec<u8> {
    let v = Vec::from_raw_parts(ptr, len, len);
    v
}
fn main() {
    let v = genvec();
    assert_eq!('a' as u8, v[0]);
}
