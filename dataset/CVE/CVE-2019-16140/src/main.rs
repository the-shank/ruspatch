fn genvec() -> Vec<u8>{ 
    let mut s=String::from("a tmp string"); 
    /*fix2: let mut s = ManuallyDrop::new(String::from("a tmp string"));*/ 
    let ptr = s.as_mut_ptr(); 
    unsafe { 
        let v = ptr2vec(ptr, s.len());
        return v;
        
        // let v=Vec::from_raw_parts(ptr, s.len(), s.len()); 
        /*fix1: mem::forget(s);*/ 
        // return v; 
        /*s is freed when the function returns*/ 
    } 
} 
unsafe fn ptr2vec(ptr: *mut u8, len: usize) -> Vec<u8>{
    let v=Vec::from_raw_parts(ptr, len, len); 
    v
}
fn main() { 
    let v = genvec(); 
    assert_eq!('a' as u8,v[0]); /*use-after-free*/ 
    /*double free: v is released when the function returns*/ 
}
