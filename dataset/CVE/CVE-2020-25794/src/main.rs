#![feature(vec_into_raw_parts)]
use std::{io::Read, mem, slice};

struct Foo {
    vec: Vec<i32>,
}
impl Foo {
    #[warn(deprecated)]
    #[warn(unused_must_use)]
    pub unsafe fn read_from(src: &mut dyn Read) -> Foo {
        let mut foo = mem::uninitialized::<Foo>();
        //panic!(); /*panic here would recalim the uninitialized memory of type <Foo>*/
        let s = slice::from_raw_parts_mut(&mut foo as *mut _ as *mut u8, mem::size_of::<Foo>());
        src.read_exact(s);
        foo
    }
}
fn main() {
    let v = vec![0, 1, 2, 3, 4, 5, 6];
    let (p, len, cap) = v.into_raw_parts();
    let u = [p as u64, len as _, cap as _];
    let bp: *const u8 = &u[0] as *const u64 as *const _;
    unsafe{
        slice2foo(bp);
    }
}

unsafe fn slice2foo(p: *const u8){
    let mut b:&[u8]= slice::from_raw_parts(p, mem::size_of::<u64>()*3); 
    let foo = Foo::read_from(&mut b as _);
    println!("foo = {:?}", foo.vec);
}