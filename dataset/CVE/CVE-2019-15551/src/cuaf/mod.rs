#![allow(
    dead_code,
    mutable_transmutes,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused_assignments,
    unused_mut
)]
extern "C" {
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    fn free(__ptr: *mut libc::c_void);
    fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;
}
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type int64_t = __int64_t;
pub type uint64_t = __uint64_t;
#[no_mangle]
pub unsafe extern "C" fn allocate_c(length: uint64_t) -> *mut int64_t {
    let mut vec_buffer_ptr: *mut int64_t =
        malloc((::std::mem::size_of::<int64_t>() as libc::c_ulong).wrapping_mul(length))
            as *mut int64_t;
    let mut i: libc::c_int = 0 as libc::c_int;
    while (i as libc::c_ulong) < length {
        *vec_buffer_ptr.offset(i as isize) = i as int64_t;
        printf(
            b"c: %ld\n\0" as *const u8 as *const libc::c_char,
            *vec_buffer_ptr.offset(i as isize),
        );
        i += 1;
    }
    return vec_buffer_ptr;
}
#[no_mangle]
pub unsafe extern "C" fn deallocate_c(mut vec_buffer_ptr: *mut int64_t) {
    free(vec_buffer_ptr as *mut libc::c_void);
    printf(b"Free the vec_buffer!\n\0" as *const u8 as *const libc::c_char);
}
